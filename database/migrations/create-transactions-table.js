// Transactions ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïä§ÌÅ¨Î¶ΩÌä∏
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.resolve(__dirname, '..', 'data', 'repair_center.db');

console.log('Transactions ÌÖåÏù¥Î∏î ÏÉùÏÑ± Î∞è ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏãúÏûë...');
console.log('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ΩÎ°ú:', dbPath);

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïò§Î•ò:', err.message);
        return;
    }
    console.log('Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.');
    
    createTransactionsTable();
});

function createTransactionsTable() {
    const createTableSQL = `
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            transaction_date DATETIME NOT NULL,
            transaction_type TEXT NOT NULL CHECK (transaction_type IN (
                'SALE',
                'PURCHASE',
                'REPAIR_PART',
                'REPAIR_LABOR',
                'RETURN',
                'EXPENSE'
            )),
            reference_type TEXT,  -- 'purchase', 'repair', 'repair_part', 'repair_labor' Îì±
            reference_id INTEGER,  -- ÏõêÎ≥∏ ÌÖåÏù¥Î∏îÏùò ID
            customer_id INTEGER,
            product_id INTEGER,
            amount INTEGER NOT NULL,
            description TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (customer_id) REFERENCES customers(id),
            FOREIGN KEY (product_id) REFERENCES products(id)
        );
        
        CREATE INDEX IF NOT EXISTS idx_transactions_date ON transactions(transaction_date);
        CREATE INDEX IF NOT EXISTS idx_transactions_type ON transactions(transaction_type);
        CREATE INDEX IF NOT EXISTS idx_transactions_customer ON transactions(customer_id);
        CREATE INDEX IF NOT EXISTS idx_transactions_reference ON transactions(reference_type, reference_id);
    `;
    
    db.exec(createTableSQL, (err) => {
        if (err) {
            console.error('Transactions ÌÖåÏù¥Î∏î ÏÉùÏÑ± Ïò§Î•ò:', err.message);
            return;
        }
        console.log('‚úÖ Transactions ÌÖåÏù¥Î∏îÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.');
        
        migrateExistingData();
    });
}

function migrateExistingData() {
    console.log('\nÍ∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò ÏãúÏûë...');
    
    // 1. purchases Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
    migratePurchases((err) => {
        if (err) {
            console.error('purchases ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err);
            return;
        }
        
        // 2. repairs Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
        migrateRepairs((err) => {
            if (err) {
                console.error('repairs ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err);
                return;
            }
            
            // 3. repair_parts Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
            migrateRepairParts((err) => {
                if (err) {
                    console.error('repair_parts ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err);
                    return;
                }
                
                // 4. repair_labor Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
                migrateRepairLabor((err) => {
                    if (err) {
                        console.error('repair_labor ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err);
                        return;
                    }
                    
                    console.log('\n‚úÖ Î™®Îì† Îç∞Ïù¥ÌÑ∞ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
                    showSummary();
                });
            });
        });
    });
}

function migratePurchases(callback) {
    const query = `
        INSERT INTO transactions (
            transaction_date,
            transaction_type,
            reference_type,
            reference_id,
            customer_id,
            amount,
            description
        )
        SELECT 
            p.purchase_date,
            CASE 
                WHEN p.type = 'ÌåêÎß§' THEN 'SALE'
                WHEN p.type = 'Íµ¨Îß§' THEN 'PURCHASE'
                WHEN p.type = 'Î∞òÌíà' AND p.original_type = 'ÌåêÎß§' THEN 'RETURN'
                WHEN p.type = 'Î∞òÌíà' AND p.original_type = 'Íµ¨Îß§' THEN 'EXPENSE'
                ELSE 'PURCHASE'
            END,
            'purchase',
            p.id,
            p.customer_id,
            p.total_amount,
            'Purchase: ' || p.purchase_code
        FROM purchases p
        WHERE NOT EXISTS (
            SELECT 1 FROM transactions t 
            WHERE t.reference_type = 'purchase' 
            AND t.reference_id = p.id
        )
    `;
    
    db.run(query, function(err) {
        if (err) {
            console.error('purchases ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err.message);
            callback(err);
        } else {
            console.log(`‚úÖ purchases: ${this.changes}Í±¥Ïù¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêòÏóàÏäµÎãàÎã§.`);
            callback(null);
        }
    });
}

function migrateRepairs(callback) {
    const query = `
        INSERT INTO transactions (
            transaction_date,
            transaction_type,
            reference_type,
            reference_id,
            customer_id,
            amount,
            description
        )
        SELECT 
            r.repair_date,
            'REPAIR_LABOR',
            'repair',
            r.id,
            r.customer_id,
            r.total_cost,
            'Repair: ' || COALESCE(r.device_model, r.device_type, 'ÏàòÎ¶¨')
        FROM repairs r
        WHERE r.total_cost > 0
        AND r.status = 'ÏôÑÎ£å'
        AND NOT EXISTS (
            SELECT 1 FROM transactions t 
            WHERE t.reference_type = 'repair' 
            AND t.reference_id = r.id
        )
    `;
    
    db.run(query, function(err) {
        if (err) {
            console.error('repairs ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err.message);
            callback(err);
        } else {
            console.log(`‚úÖ repairs: ${this.changes}Í±¥Ïù¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêòÏóàÏäµÎãàÎã§.`);
            callback(null);
        }
    });
}

function migrateRepairParts(callback) {
    const query = `
        INSERT INTO transactions (
            transaction_date,
            transaction_type,
            reference_type,
            reference_id,
            customer_id,
            product_id,
            amount,
            description
        )
        SELECT 
            r.repair_date,
            'REPAIR_PART',
            'repair_part',
            rp.id,
            r.customer_id,
            rp.product_id,
            rp.total_price,
            'Repair Part: ' || rp.name
        FROM repair_parts rp
        JOIN repairs r ON rp.repair_id = r.id
        WHERE NOT EXISTS (
            SELECT 1 FROM transactions t 
            WHERE t.reference_type = 'repair_part' 
            AND t.reference_id = rp.id
        )
    `;
    
    db.run(query, function(err) {
        if (err) {
            console.error('repair_parts ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err.message);
            callback(err);
        } else {
            console.log(`‚úÖ repair_parts: ${this.changes}Í±¥Ïù¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêòÏóàÏäµÎãàÎã§.`);
            callback(null);
        }
    });
}

function migrateRepairLabor(callback) {
    const query = `
        INSERT INTO transactions (
            transaction_date,
            transaction_type,
            reference_type,
            reference_id,
            customer_id,
            amount,
            description
        )
        SELECT 
            r.repair_date,
            'REPAIR_LABOR',
            'repair_labor',
            rl.id,
            r.customer_id,
            rl.amount,
            'Repair Labor: ' || rl.description
        FROM repair_labor rl
        JOIN repairs r ON rl.repair_id = r.id
        WHERE NOT EXISTS (
            SELECT 1 FROM transactions t 
            WHERE t.reference_type = 'repair_labor' 
            AND t.reference_id = rl.id
        )
    `;
    
    db.run(query, function(err) {
        if (err) {
            console.error('repair_labor ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïò§Î•ò:', err.message);
            callback(err);
        } else {
            console.log(`‚úÖ repair_labor: ${this.changes}Í±¥Ïù¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖòÎêòÏóàÏäµÎãàÎã§.`);
            callback(null);
        }
    });
}

function showSummary() {
    const summaryQuery = `
        SELECT 
            transaction_type,
            COUNT(*) as count,
            SUM(amount) as total_amount
        FROM transactions
        GROUP BY transaction_type
        ORDER BY transaction_type
    `;
    
    db.all(summaryQuery, [], (err, rows) => {
        if (err) {
            console.error('ÏöîÏïΩ Ï°∞Ìöå Ïò§Î•ò:', err.message);
            return;
        }
        
        console.log('\nüìä Transactions ÌÖåÏù¥Î∏î ÏöîÏïΩ:');
        console.log('ÌÉÄÏûÖ\t\t\tÍ±¥Ïàò\t\tÏ¥ùÏï°');
        console.log('='.repeat(50));
        rows.forEach(row => {
            console.log(`${row.transaction_type}\t\t${row.count}Í±¥\t\t${row.total_amount.toLocaleString()}Ïõê`);
        });
        
        db.close();
    });
}

